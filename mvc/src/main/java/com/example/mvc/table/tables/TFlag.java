/*
 * This file is generated by jOOQ.
*/
package com.example.mvc.table.tables;


import com.example.mvc.table.Kelu;
import com.example.mvc.table.Keys;
import com.example.mvc.table.tables.records.TFlagRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TFlag extends TableImpl<TFlagRecord> {

    private static final long serialVersionUID = -1564679641;

    /**
     * The reference instance of <code>kelu.t_flag</code>
     */
    public static final TFlag t_flag = new TFlag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TFlagRecord> getRecordType() {
        return TFlagRecord.class;
    }

    /**
     * The column <code>kelu.t_flag.id</code>.
     */
    public final TableField<TFlagRecord, Integer> id = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>kelu.t_flag.user_Id</code>. 用户id
     */
    public final TableField<TFlagRecord, Integer> user_Id = createField("user_Id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "用户id");

    /**
     * The column <code>kelu.t_flag.nickname</code>. 用户昵称
     */
    public final TableField<TFlagRecord, String> nickname = createField("nickname", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "用户昵称");

    /**
     * The column <code>kelu.t_flag.flag</code>. 用户flag
     */
    public final TableField<TFlagRecord, String> flag = createField("flag", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "用户flag");

    /**
     * The column <code>kelu.t_flag.approve</code>. 赞成
     */
    public final TableField<TFlagRecord, Integer> approve = createField("approve", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "赞成");

    /**
     * The column <code>kelu.t_flag.opposition</code>. 反对
     */
    public final TableField<TFlagRecord, Integer> opposition = createField("opposition", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "反对");

    /**
     * The column <code>kelu.t_flag.pic</code>. flag图文件名
     */
    public final TableField<TFlagRecord, String> pic = createField("pic", org.jooq.impl.SQLDataType.VARCHAR(300).nullable(false), this, "flag图文件名");

    /**
     * The column <code>kelu.t_flag.postTime</code>.
     */
    public final TableField<TFlagRecord, LocalDateTime> postTime = createField("postTime", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>kelu.t_flag</code> table reference
     */
    public TFlag() {
        this(DSL.name("t_flag"), null);
    }

    /**
     * Create an aliased <code>kelu.t_flag</code> table reference
     */
    public TFlag(String alias) {
        this(DSL.name(alias), t_flag);
    }

    /**
     * Create an aliased <code>kelu.t_flag</code> table reference
     */
    public TFlag(Name alias) {
        this(alias, t_flag);
    }

    private TFlag(Name alias, Table<TFlagRecord> aliased) {
        this(alias, aliased, null);
    }

    private TFlag(Name alias, Table<TFlagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Kelu.kelu;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TFlagRecord, Integer> getIdentity() {
        return Keys.IDENTITY_t_flag;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TFlagRecord> getPrimaryKey() {
        return Keys.KEY_t_flag_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TFlagRecord>> getKeys() {
        return Arrays.<UniqueKey<TFlagRecord>>asList(Keys.KEY_t_flag_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TFlag as(String alias) {
        return new TFlag(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TFlag as(Name alias) {
        return new TFlag(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TFlag rename(String name) {
        return new TFlag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TFlag rename(Name name) {
        return new TFlag(name, null);
    }
}
