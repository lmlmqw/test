/*
 * This file is generated by jOOQ.
*/
package com.example.mvc.table.tables;


import com.example.mvc.table.Kelu;
import com.example.mvc.table.Keys;
import com.example.mvc.table.tables.records.TDepartmentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TDepartment extends TableImpl<TDepartmentRecord> {

    private static final long serialVersionUID = -1981922582;

    /**
     * The reference instance of <code>kelu.t_department</code>
     */
    public static final TDepartment t_department = new TDepartment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TDepartmentRecord> getRecordType() {
        return TDepartmentRecord.class;
    }

    /**
     * The column <code>kelu.t_department.id</code>.
     */
    public final TableField<TDepartmentRecord, Integer> id = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>kelu.t_department.department_name</code>.
     */
    public final TableField<TDepartmentRecord, String> department_name = createField("department_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>kelu.t_department.create_time</code>.
     */
    public final TableField<TDepartmentRecord, LocalDateTime> create_time = createField("create_time", org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>kelu.t_department.parent_id</code>.
     */
    public final TableField<TDepartmentRecord, Integer> parent_id = createField("parent_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>kelu.t_department.seq</code>.
     */
    public final TableField<TDepartmentRecord, Integer> seq = createField("seq", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>kelu.t_department.level</code>.
     */
    public final TableField<TDepartmentRecord, Byte> level = createField("level", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>kelu.t_department.is_used</code>. 0代表启用  1代表不启用
     */
    public final TableField<TDepartmentRecord, Byte> is_used = createField("is_used", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "0代表启用  1代表不启用");

    /**
     * The column <code>kelu.t_department.department_describe</code>.
     */
    public final TableField<TDepartmentRecord, String> department_describe = createField("department_describe", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>kelu.t_department</code> table reference
     */
    public TDepartment() {
        this(DSL.name("t_department"), null);
    }

    /**
     * Create an aliased <code>kelu.t_department</code> table reference
     */
    public TDepartment(String alias) {
        this(DSL.name(alias), t_department);
    }

    /**
     * Create an aliased <code>kelu.t_department</code> table reference
     */
    public TDepartment(Name alias) {
        this(alias, t_department);
    }

    private TDepartment(Name alias, Table<TDepartmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private TDepartment(Name alias, Table<TDepartmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Kelu.kelu;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TDepartmentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_t_department;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TDepartmentRecord> getPrimaryKey() {
        return Keys.KEY_t_department_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TDepartmentRecord>> getKeys() {
        return Arrays.<UniqueKey<TDepartmentRecord>>asList(Keys.KEY_t_department_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TDepartment as(String alias) {
        return new TDepartment(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TDepartment as(Name alias) {
        return new TDepartment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TDepartment rename(String name) {
        return new TDepartment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TDepartment rename(Name name) {
        return new TDepartment(name, null);
    }
}
