/*
 * This file is generated by jOOQ.
*/
package com.example.mvc.table.tables;


import com.example.mvc.table.Kelu;
import com.example.mvc.table.Keys;
import com.example.mvc.table.tables.records.TAccountRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 用户表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TAccount extends TableImpl<TAccountRecord> {

    private static final long serialVersionUID = 2094003082;

    /**
     * The reference instance of <code>kelu.t_account</code>
     */
    public static final TAccount t_account = new TAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TAccountRecord> getRecordType() {
        return TAccountRecord.class;
    }

    /**
     * The column <code>kelu.t_account.id</code>.
     */
    public final TableField<TAccountRecord, Integer> id = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>kelu.t_account.username</code>.
     */
    public final TableField<TAccountRecord, String> username = createField("username", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>kelu.t_account.password</code>. 1234
     */
    public final TableField<TAccountRecord, String> password = createField("password", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "1234");

    /**
     * The column <code>kelu.t_account.create_time</code>.
     */
    public final TableField<TAccountRecord, LocalDateTime> create_time = createField("create_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>kelu.t_account.last_time</code>.
     */
    public final TableField<TAccountRecord, LocalDateTime> last_time = createField("last_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>kelu.t_account.is_admin</code>.
     */
    public final TableField<TAccountRecord, Byte> is_admin = createField("is_admin", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>kelu.t_account.department_id</code>.
     */
    public final TableField<TAccountRecord, Integer> department_id = createField("department_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>kelu.t_account.nickname</code>.
     */
    public final TableField<TAccountRecord, String> nickname = createField("nickname", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>kelu.t_account.is_disabled</code>. 0为没封禁 1为封禁
     */
    public final TableField<TAccountRecord, Byte> is_disabled = createField("is_disabled", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "0为没封禁 1为封禁");

    /**
     * Create a <code>kelu.t_account</code> table reference
     */
    public TAccount() {
        this(DSL.name("t_account"), null);
    }

    /**
     * Create an aliased <code>kelu.t_account</code> table reference
     */
    public TAccount(String alias) {
        this(DSL.name(alias), t_account);
    }

    /**
     * Create an aliased <code>kelu.t_account</code> table reference
     */
    public TAccount(Name alias) {
        this(alias, t_account);
    }

    private TAccount(Name alias, Table<TAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private TAccount(Name alias, Table<TAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "用户表");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Kelu.kelu;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TAccountRecord, Integer> getIdentity() {
        return Keys.IDENTITY_t_account;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TAccountRecord> getPrimaryKey() {
        return Keys.KEY_t_account_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TAccountRecord>> getKeys() {
        return Arrays.<UniqueKey<TAccountRecord>>asList(Keys.KEY_t_account_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TAccount as(String alias) {
        return new TAccount(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TAccount as(Name alias) {
        return new TAccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TAccount rename(String name) {
        return new TAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TAccount rename(Name name) {
        return new TAccount(name, null);
    }
}
